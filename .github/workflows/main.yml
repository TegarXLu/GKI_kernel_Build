name: Build Custom GKI Kernel

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-kernel:
    runs-on: ubuntu-22.04
    timeout-minutes: 240

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git-core gnupg flex bison build-essential zip \
          curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
          lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev \
          libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python3 \
          libssl-dev libelf-dev bc cpio rsync kmod

    - name: Clone Kernel Source
      run: |
        git clone --depth=1 https://github.com/TegarXLu/android_kernel_common-5.10 -b android12-5.10 kernel
        cd kernel
        git submodule update --init --recursive

    - name: Clone KernelSU
      run: |
        cd kernel
        git clone https://github.com/tiann/KernelSU -b main drivers/kernelsu
        git clone https://github.com/ya0211/sUSFS -b main drivers/susfs

    - name: Setup Toolchain
      run: |
        mkdir toolchain
        cd toolchain
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-r450784d.tar.gz
        tar -xzf clang-r450784d.tar.gz
        wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/heads/master.tar.gz
        tar -xzf master.tar.gz
        cd ..

    - name: Apply Patches and Configurations
      run: |
        cd kernel
        
        # Apply Snapdragon optimizations
        curl -sL https://github.com/Snapdragon-optimized/patches/raw/main/5.10/sd-opt.patch | git apply - || true
        
        # KernelSU config
        echo "CONFIG_KPROBES=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_OVERLAY_FS=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KERNELSU=y" >> arch/arm64/configs/gki_defconfig
        
        # sUSFS config
        echo "CONFIG_SUSFS=y" >> arch/arm64/configs/gki_defconfig
        
        # LTO Full config
        echo "CONFIG_LTO_GCC=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO_CLANG=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO_CLANG_FULL=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_THINLTO=n" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_ARCH_SUPPORTS_LTO_CLANG=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_HAS_LTO_CLANG=y" >> arch/arm64/configs/gki_defconfig

    - name: Build Kernel
      run: |
        cd kernel
        export ARCH=arm64
        export CLANG_PATH=$(pwd)/../toolchain
        export PATH=${CLANG_PATH}/bin:${PATH}
        export CROSS_COMPILE=$(pwd)/../toolchain/bin/aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=$(pwd)/../toolchain/bin/arm-linux-androideabi-
        
        # Full LTO build
        make O=out ARCH=arm64 gki_defconfig
        
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang \
          LD=ld.lld \
          AR=llvm-ar \
          NM=llvm-nm \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          STRIP=llvm-strip \
          LLVM=1 \
          LLVM_IAS=1 \
          LTO=full \
          KERNELSU=1 \
          SUSFS=1 \
          2>&1 | tee build.log

    - name: Package Artifacts
      run: |
        cd kernel/out
        mkdir -p artifacts
        
        # Kernel image
        cp arch/arm64/boot/Image.gz artifacts/Image.gz
        cp arch/arm64/boot/Image artifacts/Image
        
        # KernelSU files
        cp drivers/kernelsu/kernelsu.ko artifacts/
        
        # Version info
        KERNEL_VERSION=$(strings vmlinux | grep "Linux version" | awk '{print $3}')
        echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
        
        # Create flashable zip
        cd artifacts
        zip -r9 "GKI-5.10_${KERNEL_VERSION}_KSU-sUSFS-LTO.zip" *

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel-build
        path: kernel/out/artifacts/*
