name: Build GKI Kernel with Clang 19

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  set-date:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.getdate.outputs.date }}
    steps:
      - name: Get Current Date
        id: getdate
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set build matrix
        id: set-matrix
        run: |
          MATRIX='['
          if [ "${{ github.event.inputs.BUILD_NOROOT }}" == "true" ]; then
            MATRIX+='{"name":"noroot"},'
          fi
          if [ "${{ github.event.inputs.BUILD_KSUNEXT }}" == "true" ]; then
            MATRIX+='{"name":"ksunext"},'
          fi
          if [ "${{ github.event.inputs.BUILD_SUKISU }}" == "true" ]; then
            MATRIX+='{"name":"sukisu"},'
          fi
          MATRIX="${MATRIX%,}]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
  build:
    needs: [setup-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Set up dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget curl build-essential bc bison \
            flex libssl-dev libncurses-dev libelf-dev ccache python3 unzip
      - name: Create Swap
        run: |
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git-core gnupg flex bison build-essential zip \
          curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
          lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev \
          libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python3 \
          libssl-dev libelf-dev bc cpio rsync kmod ninja-build

    - name: Install Clang 19
      run: |
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.0/clang+llvm-19.1.0-aarch64-linux-gnu.tar.xz
        tar -xf clang+llvm-19.1.0-aarch64-linux-gnu.tar.xz
        mv clang+llvm-19.1.0-aarch64-linux-gnu clang19
        echo "$(pwd)/clang19/bin" >> $GITHUB_PATH

    - name: Clone Kernel Source
      run: |
        git clone --depth=1 https://github.com/TegarXLu/android_kernel_common-5.10 -b android12-5.10 kernel
        cd kernel
        git submodule update --init --recursive

    - name: Setup KernelSU & sUSFS
      run: |
        cd kernel
        git clone https://github.com/tiann/KernelSU -b next drivers/kernelsu
        git clone https://github.com/ya0211/sUSFS -b main drivers/susfs

    - name: Apply Configurations
      run: |
        cd kernel
        
        # Base config
        echo "CONFIG_KPROBES=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_OVERLAY_FS=y" >> arch/arm64/configs/gki_defconfig
        
        # KernelSU-next
        echo "CONFIG_KERNELSU=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_DEBUG=n" >> arch/arm64/configs/gki_defconfig
        
        # sUSFS
        echo "CONFIG_SUSFS=y" >> arch/arm64/configs/gki_defconfig
        
        # Clang 19 LTO
        echo "CONFIG_LTO_CLANG=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO_CLANG_FULL=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_THINLTO=n" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_CFI_CLANG=y" >> arch/arm64/configs/gki_defconfig
        
        # Snapdragon tweaks
        echo "CONFIG_SCHED_TUNE=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_ENERGY_MODEL=y" >> arch/arm64/configs/gki_defconfig

    - name: Build Kernel
      run: |
        cd kernel
        export ARCH=arm64
        export LLVM=1
        export LLVM_IAS=1
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        
        make O=out ARCH=arm64 gki_defconfig
        
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang \
          LD=ld.lld \
          AR=llvm-ar \
          NM=llvm-nm \
          STRIP=llvm-strip \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          CLANG_FLAGS="-march=armv8-a+simd+crypto+crc" \
          KCFLAGS="-Wno-error=implicit-function-declaration" \
          2>&1 | tee build.log

    - name: Package Artifacts
      run: |
        cd kernel/out
        mkdir -p artifacts
        
        # Kernel files
        cp arch/arm64/boot/Image.gz artifacts/
        cp arch/arm64/boot/Image artifacts/
        cp .config artifacts/
        
        # KernelSU module
        cp drivers/kernelsu/kernelsu.ko artifacts/
        
        # Version info
        KERNEL_VERSION=$(strings vmlinux | grep "Linux version" | awk '{print $3}')
        echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
        
        # Create flashable zip
        cd artifacts
        zip -r9 "GKI-5.10_Clang19_${KERNEL_VERSION}.zip" *

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel-clang19
        path: kernel/out/artifacts/*
