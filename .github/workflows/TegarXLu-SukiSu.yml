name: SukiSu-TegarXLu_Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_REPO:
        description: 'Link repo kernel'
        required: true
        default: 'https://github.com/TegarXLu/TegarXLu-Kernel-GKI-5.10'
      KERNEL_BRANCH:
        description: 'Branch kernel'
        required: true
        default: 'main'
      BUILD_SUKISU:
        description: 'Build SukiSU variant'
        type: boolean
        default: true
      RELEASE:
        description: 'Release kernel?'
        type: boolean
        default: true

jobs:
  set-date:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.getdate.outputs.date }}
    steps:
      - name: Get Current Date
        id: getdate
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set build matrix
        id: set-matrix
        run: |
          MATRIX='['
          if [ "${{ github.event.inputs.BUILD_SUKISU }}" == "true" ]; then
            MATRIX+='{"name":"sukisu"},'
          fi
          MATRIX="${MATRIX%,}]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
  build:
    needs: [setup-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Set up dependencies
        run: |
          sudo apt update
          sudo apt install -y git wget curl build-essential bc bison \
            flex libssl-dev libncurses-dev libelf-dev ccache python3 unzip
      - name: Create Swap
        run: |
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
      - name: Clone Kernel Source
        run: |
          git clone --depth=1 ${{ github.event.inputs.KERNEL_REPO }} -b ${{ github.event.inputs.KERNEL_BRANCH }} kernel
      
      - name: Clone kernel modules repository
        run: |
          git clone https://github.com/garnet-random/android_kernel_xiaomi_sm7435-modules.git modules

      - name: Clone Sukisu Ultra (KernelSU fork)
        if: ${{ matrix.build_mode == 'sukisu' }}
        run: |
          git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git sukisu-ultra

      - name: Integrate Sukisu Ultra into kernel
        if: ${{ matrix.build_mode == 'sukisu' }}
        run: |
          cd kernel
          bash ../sukisu-ultra/kernel/setup.sh susfs-main

      - name: Clone SUSFS module
        if: ${{ matrix.build_mode == 'sukisu' }}
        run: git clone https://github.com/sidex15/susfs4ksu-module.git susfs

      - name: Integrate SUSFS into kernel
        if: ${{ matrix.build_mode == 'sukisu' }}
        run: |
          cd kernel
          # Terapkan patch SUSFS ke kernel
          for patch in ../susfs/kernel_patches/*.patch; do
            patch -p1 < "$patch" || echo "[WARNING] SUSFS patch $patch gagal diterapkan"
          done
          # Salin filesystem SUSFS dan header
          mkdir -p fs/susfs include/linux
          cp -r ../susfs/ksu_module_susfs/jni/* fs/susfs/ 2>/dev/null || true
          if [ ! -f include/linux/susfs.h ]; then
            # Buat header minimal SUSFS jika belum ada
            cat << 'EOF' >> include/linux/susfs.h
            #ifndef _LINUX_SUSFS_H
            #define _LINUX_SUSFS_H
            #ifdef CONFIG_KSU_SUSFS
            #endif
            #endif /* _LINUX_SUSFS_H */
            EOF
          fi

      - name: Setup kernel configuration (GKI base)
        run: |
          cd kernel
          make ARCH=arm64 O=out gki_defconfig
          if [ -f arch/arm64/configs/vendor/garnet_GKI.config ]; then
            cat arch/arm64/configs/vendor/garnet_GKI.config >> out/.config
          fi

      - name: Enable Sukisu/SUSFS kernel config options
        if: ${{ matrix.build_mode == 'default' }}
        run: |
          cd kernel
          cat << 'EOF' >> out/.config
            # KernelSU / Sukisu Ultra configurations
            CONFIG_SECURITY=y
            CONFIG_SECURITY_NETWORK=y
            CONFIG_LSM="lockdown,yama,loadpin,safesetid,integrity,selinux,smack,tomoyo,apparmor"
            CONFIG_SECURITY_SELINUX=y
            CONFIG_SECURITY_SELINUX_BOOTPARAM=y
            CONFIG_SECURITY_SELINUX_DEVELOP=y
            CONFIG_SECURITY_SELINUX_AVC_STATS=y
            CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0
            CONFIG_SECURITY_SELINUX_SIDTAB_HASH_BITS=9
            CONFIG_SECURITY_SELINUX_SID2STR_CACHE_SIZE=256

            # Enable loadable module support for KernelSU
            CONFIG_MODULES=y
            CONFIG_MODULE_UNLOAD=y
            CONFIG_MODVERSIONS=y
            CONFIG_MODULE_SRCVERSION_ALL=y

            # Enable overlayfs for SUSFS
            CONFIG_OVERLAY_FS=y
            CONFIG_OVERLAY_FS_REDIRECT_DIR=y
            CONFIG_OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW=y
            CONFIG_OVERLAY_FS_INDEX=y
            CONFIG_OVERLAY_FS_NFS_EXPORT=y
            CONFIG_OVERLAY_FS_XINO_AUTO=y
            CONFIG_OVERLAY_FS_METACOPY=y

            # Advanced SUSFS filesystem configurations
            CONFIG_FUSE_FS=y
            CONFIG_CUSE=y
            CONFIG_PROC_FS=y
            CONFIG_PROC_SYSCTL=y
            CONFIG_SYSFS=y
            CONFIG_TMPFS=y
            CONFIG_TMPFS_POSIX_ACL=y
            CONFIG_TMPFS_XATTR=y

            # Advanced security features for SUSFS root hiding
            CONFIG_SECURITY_DMESG_RESTRICT=y
            CONFIG_SECURITY_PERF_EVENTS_RESTRICT=y
            CONFIG_HARDENED_USERCOPY=y
            CONFIG_HARDENED_USERCOPY_FALLBACK=y
            CONFIG_SLAB_FREELIST_RANDOM=y
            CONFIG_SLAB_FREELIST_HARDENED=y
            CONFIG_SHUFFLE_PAGE_ALLOCATOR=y
            CONFIG_SLUB_DEBUG=y

            # Memory protection for SUSFS
            CONFIG_STRICT_KERNEL_RWX=y
            CONFIG_STRICT_MODULE_RWX=y
            CONFIG_PAGE_TABLE_ISOLATION=y
            CONFIG_RETPOLINE=y
            CONFIG_SLS=y

            # Additional mount and filesystem features for SUSFS
            CONFIG_FANOTIFY=y
            CONFIG_FANOTIFY_ACCESS_PERMISSIONS=y
            CONFIG_QUOTA=y
            CONFIG_QFMT_V2=y
            CONFIG_QUOTACTL=y

            # Enable namespace support for root hiding
            CONFIG_NAMESPACES=y
            CONFIG_UTS_NS=y
            CONFIG_IPC_NS=y
            CONFIG_USER_NS=y
            CONFIG_PID_NS=y
            CONFIG_NET_NS=y
            CONFIG_CGROUP_NS=y

            # Enable file capabilities
            CONFIG_SECURITY_FILE_CAPABILITIES=y

            # Enable audit for security monitoring
            CONFIG_AUDIT=y
            CONFIG_AUDITSYSCALL=y

            # KPM (Kernel Patch Module) support for Sukisu Ultra
            CONFIG_KPM=y

            # KALLSYMS support required for Sukisu Ultra
            CONFIG_KALLSYMS=y
            CONFIG_KALLSYMS_ALL=y
            CONFIG_KALLSYMS_ABSOLUTE_PERCPU=y
            CONFIG_KALLSYMS_BASE_RELATIVE=y

            # Disable warnings as errors to prevent build failures
            # CONFIG_WERROR is not set

            # Disable problematic drivers that cause format warnings
            # CONFIG_CLK_QCOM is not set

            # Enable SUSFS for KernelSU integration
            CONFIG_KSU_SUSFS=y
            CONFIG_KSU_SUSFS_SUS_PATH=y
            CONFIG_KSU_SUSFS_SUS_MOUNT=y
            CONFIG_KSU_SUSFS_SUS_KSTAT=y
            CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y
            CONFIG_KSU_SUSFS_TRY_UMOUNT=y
            CONFIG_KSU_SUSFS_SPOOF_UNAME=y
            CONFIG_KSU_SUSFS_ENABLE_LOG=y
            EOF
            make O=out ARCH=arm64 olddefconfig

      - name: Download Clang
        run: |
          mkdir clang
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/d0e0a3882edb1acc193263ae98fce706e82aca38/clang-r574158.tar.gz -O clang.tar.gz
          tar -xf clang.tar.gz -C clang
          
      - name: Set CONFIG_LOCALVERSION
        run: |
          if [[ "${{ matrix.name }}" == "sukisu" ]]; then
            DEFCONFIG=sukisu/arch/arm64/configs/gki_defconfig
            VERSION="-TegarXLu-SukiSU"
          fi
          sed -i '/CONFIG_LOCALVERSION/d' $DEFCONFIG
          echo "CONFIG_LOCALVERSION=\"$VERSION\"" >> $DEFCONFIG
          
      - name: Append CONFIG_HZ_300 and CONFIG_HZ=300 to defconfig
        run: |
          echo -e '\nCONFIG_HZ_300=y\nCONFIG_HZ=300' >> kernel/arch/arm64/configs/gki_defconfig
          
      - name: Final Clean Tree Commit (before build)
        run: |
          cd kernel
          git add .
          git commit -m "Final clean tree before build" || true
          
      - name: Build kernel and modules
        run: |
          cd ${{ matrix.name == 'sukisu' && 'kernel' || matrix.name }}
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANG_PATH=$GITHUB_WORKSPACE/clang
          export PATH=$CLANG_PATH/bin:$PATH
          set -x
          set -e
          export CC=clang
          export CXX=clang++
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          export HOSTCC=clang
          export HOSTCXX=clang++
          export CROSS_COMPILE=aarch64-linux-gnu-
          export LLVM=1
          export LLVM_IAS=1
          export LTO=full
          make O=out ARCH=arm64 gki_defconfig
          make -j$(nproc) O=out ARCH=arm64 LLVM=1 LLVM_IAS=1 LTO=full
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CC=aarch64-linux-gnu-gcc
          export KCONFIG_NOTIMESTAMP=1
          export KCFLAGS="-Wno-error -Wno-format -Wno-unused-variable -Wno-stringop-overflow"
          export HOSTCFLAGS="-Wno-error -Wno-format"
          # Disable CONFIG_FORTIFY_SOURCE and hardened_usercopy for build
          sed -i 's/CONFIG_FORTIFY_SOURCE=y/# CONFIG_FORTIFY_SOURCE is not set/' out/.config || true
          sed -i 's/CONFIG_HARDENED_USERCOPY=y/# CONFIG_HARDENED_USERCOPY is not set/' out/.config || true
          export KCFLAGS="$KCFLAGS -D__NO_FORTIFY -fno-stack-protector"
          # Patch KPM copy_to_user if exists
          if [ -f drivers/kernelsu/kpm/kpm.c ]; then
            sed -i 's/if(copy_to_user(result, \\&res, sizeof(res)) < 1)/if(put_user(res, (int __user *)result))/g' drivers/kernelsu/kpm/kpm.c
          fi
          make -j$(nproc) O=out ARCH=arm64 KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS" 2>&1 | tee build.log
          make O=out ARCH=arm64 modules -j$(nproc) KCFLAGS="$KCFLAGS" HOSTCFLAGS="$HOSTCFLAGS"

      - name: Verify SUSFS Patch
        run: |
          echo "🔍 Verifying SUSFS in built kernel config..."
          if [[ "${{ matrix.name }}" == "noroot" ]]; then
            CONFIG=kernel/out/.config
          else
            CONFIG=${{ matrix.name }}/out/.config
          fi
          grep -q "CONFIG_KSU=y" "$CONFIG" && echo "✅ CONFIG_KSU found!" || echo "❌ CONFIG_KSU not found!"
          grep -q "CONFIG_KSU_SUSFS=y" "$CONFIG" && echo "✅ CONFIG_KSU_SUSFS found!" || echo "❌ CONFIG_KSU_SUSFS not found!"
          grep -q "CONFIG_SECURITYFS=y" "$CONFIG" && echo "✅ CONFIG_SECURITYFS found!" || echo "❌ CONFIG_SECURITYFS not found!"
          
      - name: Package Kernel with AnyKernel3
        id: zipkernel
        run: |
          DATE=$(date +%Y%m%d)
          echo "DATE=$DATE" >> $GITHUB_ENV
          if [[ "${{ matrix.name }}" == "noroot" ]]; then
            ZIP_NAME="TegarXLu-GKI-${DATE}.zip"
            OUT_DIR="kernel"
          elif [[ "${{ matrix.name }}" == "ksunext" ]]; then
            ZIP_NAME="TegarXLu-GKI-KSUNext+SUSFS-${DATE}.zip"
            OUT_DIR="ksunext"
          elif [[ "${{ matrix.name }}" == "sukisu" ]]; then
            ZIP_NAME="TegarXLu-GKI-SukiSU+SUSFS-${DATE}.zip"
            OUT_DIR="sukisu"
          fi
          git clone https://github.com/TegarXLu/AnyKernel3
          cp $OUT_DIR/out/arch/arm64/boot/Image.gz AnyKernel3/
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" ./*
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zipkernel.outputs.zip_name }}
          path: ${{ steps.zipkernel.outputs.zip_name }}

  finalize:
    needs: [set-date, build]
    runs-on: ubuntu-latest
    outputs:
      date: ${{ needs.set-date.outputs.date }}
    steps:
      - name: Dummy Finalize
        run: echo "Finalize completed"

  release:
    needs: [finalize]
    if: ${{ github.event.inputs.RELEASE == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Generate Release Notes
        run: |
          echo "🔧 **TegarXLu GKI Release**" > release.txt
          if [[ "${{ github.event.inputs.BUILD_NOROOT }}" == "true" ]]; then
            echo "- 🧩 TegarXLu-GKI: Without root" >> release.txt
          fi
          if [[ "${{ github.event.inputs.BUILD_KSUNEXT }}" == "true" ]]; then
            echo "- 🛡️ TegarXLu-GKI-KSUNext+SUSFS: With root KernelSU Next + SUSFS" >> release.txt
          fi
          if [[ "${{ github.event.inputs.BUILD_SUKISU }}" == "true" ]]; then
            echo "- 🦊 TegarXLu-GKI-SukiSU+SUSFS: With root SukiSU + SUSFS" >> release.txt
          fi
          echo "" >> release.txt
          echo "📝 **Notes:**" >> release.txt
          echo "- Based on AOSP GKI 5.10" >> release.txt
          echo "- SUSFS patch applied on SukiSU and KSUNext" >> release.txt
          echo "- Can be used on GKI-based devices (Android 12-5.10)" >> release.txt
          echo "" >> release.txt
          echo "📄 <b>Full changelog</b>: [Here](${{ github.event.inputs.KERNEL_REPO }}/commits/${{ github.event.inputs.KERNEL_BRANCH }})" >> release.txt
          echo "💬 Bug reports: [Support Group](https://t.me/rmdnsupport)" >> release.txt
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: TegarXLu-GKI-${{ needs.finalize.outputs.date }}
          name: TegarXLu GKI - ${{ needs.finalize.outputs.date }}
          body_path: release.txt
          files: "**/*.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
